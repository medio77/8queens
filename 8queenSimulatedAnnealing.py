import random

import eight_queens_game as game
from random import shuffle
import copy
import math
import matplotlib.pyplot as plt

# Artificial Intelligence/A Modern Approach/Third Edition/Stuart J. Russell and Peter Norvig

def hill_climbing(board):
    hill_game = game
    temp =500
    check_list=[]
    # accountings:
    local_optimum_counter = 0
    up_steps_counter = 0
    # -------------
    board = hill_game.random_board(board)
    while (hill_game.threat_count(board)[0] != 0):
        moves = hill_game.moves_to_childs(board)
        shuffle(moves)
        for move in moves:

            # the successors of a state are all possible states
            # generated by moving a single queen to another square in the same row
            # each row has 8*8=64 successors
            child = copy.deepcopy(board)

            for j in range(0, 8):  # to clear a row
                child[move[0]][j] = 0
            child[move[0]][move[1]] = 1  # to set one child
            if temp != 1:
                temp -= 1

            if hill_game.threat_count(child)[0] < hill_game.threat_count(board)[0]:
                up_steps_counter = up_steps_counter + 1
                print('a child born with threat count:', hill_game.threat_count(child)[0])
                board = copy.deepcopy(child)
                break  # to move uphill when a move is good
            else:
                check_list.append(math.exp(-1 * abs(10) / temp))
                if ((math.exp(-1 * abs(10) / temp)) * 100) > random.randint(0, 100):
                    pass
                    # up_steps_counter = up_steps_counter + 1
                    # print('a child born with threat count:', hill_game.threat_count(child)[0])
                    # board = copy.deepcopy(child)
                    # break  # to move uphill when a bad move is lucky

            if move == moves[-1]:  # to set a random board when there are no more better moves
                local_optimum_counter = local_optimum_counter + 1
                board = hill_game.random_board(board)
    for i in board:
        print(i)
    print("total local optimums visited: ", local_optimum_counter)
    print("total up steps: ", up_steps_counter)
    plt.plot(check_list)
    plt.show()



if __name__ == '__main__':
    board = [[0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0]]
    hill_climbing(board)

